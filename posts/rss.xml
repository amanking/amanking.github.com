<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Aman King</title>
    <link>http://www.amanking.com</link>
    <pubDate>2013-12-15 01:16:03 +0530</pubDate>
    <item>
      <title>Agile Coaching Roles</title>
      <link>http://www.amanking.com/agile-coaching-roles</link>
      <pubDate>2013-12-14</pubDate>
      <description>&lt;p&gt;To me, &lt;a href="/coaching-basics"&gt;Coaching&lt;/a&gt; is about getting the most out of individuals or teams by raising their awareness levels, about their current environment, about the environment outside theirs, and most important of all, about their own potential. This is done mostly by asking them the right questions, and not by providing them ready-made answers.&lt;/p&gt;

&lt;p&gt;My definition of an &lt;em&gt;Agile Coach&lt;/em&gt;, on the other hand, is less restrictive. As an Agile Coach, coaching is my primary &lt;em&gt;modus operandi&lt;/em&gt;. But there are times when I make recommendations based on my practitioner background. I also complement coaching with aspects of mentoring and training. For example, relating personal experiences and sharing useful resources can increase someone&amp;#39;s curiosity and give them a clear direction. Conducting a workshop can help kickstart a group on practices like TDD and Refactoring.&lt;/p&gt;

&lt;p&gt;Even within the scope of Agile Coaching, I have been exposed to a variety of roles.&lt;/p&gt;

&lt;h3 id="toc_0"&gt;Role-based Practices Coaching&lt;/h3&gt;

&lt;p&gt;An Agile Coach helps team members understand their roles in an Agile setting. This involves skills-building. You may join a team as a single cross-skilled coach or as a trio of role-specific coaches: a Tech Coach, a QA Coach, and a BA Coach. With Developers, a coach will pair actively to spread practices like TDD, Refactoring, CI, etc, and will run workshops and brown bag sessions. With Testers, a coach could cover creating test scenarios from acceptance criteria, automated testing, test pyramid, and so on. For Business Analysts or Product Owners, the focus will be on prioritization exercises, negotiation skills, story writing, story slicing, determining NFRs, etc.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Process Coaching&lt;/h3&gt;

&lt;p&gt;While focusing on role-specific skills and practices is important, some teams may need help in determining what process works for them, adapting them over time, and so on. This could involve defining how each role contributes to the process, and also in general, how the entire team collaborates and focuses on improvement. Having effective stand ups, planning meetings, demos, and retrospectives fall under this. Other aspects could involve helping the team determine some metrics to observe and improve. Eg: pairing matrix, confidence meter, build failures in a day, velocity, cycle time, etc.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Leadership Coaching&lt;/h3&gt;

&lt;p&gt;At times, it is not only team members who need coaching, but their leadership as well. These may include the Team Lead, the Project Manager, the Architect Head, the Programme Manager, the Department Head, and so on. The conversation topics are usually broader level and strategic, such as prioritization of teams for Agile adoption, facilitating empowered teams, investing in appropriate infrastructure or continuous delivery initiatives, reducing overhead in IT policies, identifying improvements in architecture and ecosystem, etc.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
In most cases, a single Agile Coach on an engagement will touch upon all of the above but to varying degrees. It will be a factor of the company culture, need of the hour, and personal motivations of the people involved.&lt;/p&gt;

&lt;p&gt;The following provide further insights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.agilecoachinginstitute.com/agile-competency-whitepaper/"&gt;Agile Coaching Competencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.agilefaqs.com/2013/07/21/how-coaching-is-different-from-training-mentoring-counseling-and-consulting"&gt;Comparison of Coaching, Training, Mentoring, Consulting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Coaching-Agile-Teams-ScrumMasters-Addison-Wesley-ebook/dp/B003QP47YG/"&gt;Coaching Agile Teams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Agile Coaching Engagements</title>
      <link>http://www.amanking.com/agile-coaching-engagements</link>
      <pubDate>2013-12-14</pubDate>
      <description>&lt;p&gt;In Agile consulting, there can be different types of engagements that you get into with your client. One type of engagement may lead to another type. As an Agile Coach, you will find yourself participating across the board. Your focus areas will change based on what the engagement objectives are.&lt;/p&gt;

&lt;p&gt;Here are the typical types of engagements I have encountered.&lt;/p&gt;

&lt;h3 id="toc_0"&gt;Assessments&lt;/h3&gt;

&lt;p&gt;Sometimes a team, a department, or an organization simply is not aware of where they stand with respect to Agile adoption. They need answers to questions like: &amp;quot;Will they benefit from Agile Coaching, or are there too many prerequisites missing? Tentatively for how long will they need coaching before achieving self-sustenance? What areas need the most focus on?&amp;quot; Answering such questions means at least 2-3 days of work, involving interviews, discovery workshops, first-hand observations, metrics collections, etc. This is then followed by summarization and recommendation in the form of an assessment report, which typically contains a proposed coaching plan.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Pilot / Proof of Concept&lt;/h3&gt;

&lt;p&gt;Despite Agile initiatives at an organization level, a department could have doubts about whether or not Agile would work for their specific context. In such cases, people agree to a Proof of Concept or Pilot, starting off with Agile Coaching with one selected team for a given duration of time, having a limited set of objectives. If the Pilot goes well, the department may agree to an overall Agile adoption. Coaches involved in a Pilot have to remain very conscious of how their time is spent, what activities they take up, and what focus areas to target, all the while keeping an eye out on measuring and showcasing benefits, even if small. Periodically they will send out progress reports, and finally wrap up the engagement with a summarization that highlights what worked and what did not work, challenges faced, and recommendations to overcome them. It is important to remind clients of what was decidedly out of scope. A Pilot could be anywhere between 2-8 weeks depending on the scope of objectives.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Agile Adoption&lt;/h3&gt;

&lt;p&gt;Agile Adoption primarily refers to teams picking up Agile practices and using them for productivity gains and quality improvements. These practices could be process related such as time-boxed iterations, iteration planning, estimation, stand ups, and so on. Or these could be engineering related such as Test-driven Development, Refactoring, Continuous Integration, functional test automation, etc. However, it is established in most circles that Agile is more of a mindset than a set of processes and practices. That said, the latter helps teams try out well-described techniques that may be new to them, and possibly with time and guidance, they are able to see the short-term and long-term benefits behind the practices. Once teams reach this competency level, they are better placed to recognize and embrace the mindset change. This is what the Agile Coach will focus on: helping teams adopt certain practices, and gain higher skill levels in those, while also gradually guiding them towards the reasoning and benefits behind the practices. Tracking the team&amp;#39;s progress, checking for any drop in adoption after an initial spike, and continued efforts at sustenance, are also some of the key areas an Agile Coach looks into. Agile Adoption generally takes time, with some factors being team size, project complexity, and attitude and capabilities of team members. An Agile Coach will typically end up coaching multiple teams. Such an engagement can easily range from 2 months to a year.&lt;/p&gt;

&lt;h3 id="toc_3"&gt;Agile Transformation&lt;/h3&gt;

&lt;p&gt;Having had success with Agile Adoption, an organization may chose to embrace Agile completely across all of its departments and teams. This is Agile Transformation. It is typically organization-wide, spread horizontally as well as vertically. The focus shifts very visibly from processes and practices to mindset and culture. For it to be successful, common vision and buy-in are needed from all levels in the organization and across all departments. This will even include aspects such as IT policies, Recruitment, Performance Reviews, etc. An Agile consultant will end up focusing almost solely on strategic discussion and planning, with a lot of support from continued tactical coaching, either internal or external, at team levels. Such engagements are seen less frequently and are definitely long-term, easily spanning more than a year.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
For a further exploration of such topics, you can consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/minibooks/agile-adoption-transformation"&gt;Michael Sahota&amp;#39;s book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.agilealliance.org/programs/supporting-agile-adoption-it-is-about-change/"&gt;Agile Alliance documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/tags/agile%20adoption.html"&gt;Martin Fowler&amp;#39;s bliki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Coaching Basics</title>
      <link>http://www.amanking.com/coaching-basics</link>
      <pubDate>2013-12-09</pubDate>
      <description>&lt;p&gt;The term &lt;em&gt;Coaching&lt;/em&gt; is overloaded.&lt;/p&gt;

&lt;p&gt;Comparatively, terms like &lt;em&gt;&lt;a href="http://www.refactoring.com/"&gt;Refactoring&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="http://c2.com/cgi/wiki?YouArentGonnaNeedIt"&gt;YAGNI&lt;/a&gt;&lt;/em&gt; are recently invented. But despite having had clear definitions to start with, these words still suffer from &lt;a href="http://martinfowler.com/bliki/RefactoringMalapropism.html"&gt;malapropism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coaching&lt;/em&gt; is a plain English word, around since ages. It is not surprising that its definition in the professional world remains open. This is evident from its &lt;a href="http://en.wikipedia.org/wiki/Coaching"&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That said, there have been attempts to describe coaching better, acknowledging the wide spectrum it could cover, and yet putting some boundaries to it.&lt;/p&gt;

&lt;p&gt;My personal view on the term is still evolving despite having played the Agile Coach role. So far I&amp;#39;ve kept it simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Coaching is not classroom training; it is interpersonal; it creates awareness in individuals and teams; it is more about asking than telling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check these links for less &lt;em&gt;fuzzy&lt;/em&gt; definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.abdn.ac.uk/mgtskills/people/people2/people2-4/"&gt;Key elements of coaching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tle.tafevc.com.au/toolbox/file/44cc9067-a0f9-5e24-d9c7-67a5678d4aa9/1/10_04a.zip/toolbox/resources/res1050/res1050.htm"&gt;Coaching styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coachville.com/home/html/coaching_basics"&gt;Coaching skills&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Agile India 2014</title>
      <link>http://www.amanking.com/agile-india-2014</link>
      <pubDate>2013-12-09</pubDate>
      <description>&lt;p&gt;&lt;a href="http://2014.agileindia.org/"&gt;Agile India 2014&lt;/a&gt; is scheduled for 26th Feb - 1st Mar 2014 in Bangalore. My talk, &lt;a href="http://present.agileindia.org/proposal/16/from-practitioner-to-coach"&gt;From Practitioner to Coach&lt;/a&gt;, has been selected for the conference under the Scaling Agile track.&lt;/p&gt;

&lt;p&gt;In support of the presentation, I will blog about various coaching-related topics here. Most of the posts will be short, and will be tagged as a &lt;em&gt;nugget&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m looking forward to the conference! It has an excellent line up of speakers and topics. Do check it out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://2014.agileindia.org/" target="_blank" title="I am speaking at Agile India 2014"&gt;&lt;img src="/assets/media/images/badges/speaker-agile-india-2014.png" title="I am speaking at Agile India 2014" alt="I am speaking at Agile India 2014"/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Common code smells</title>
      <link>http://www.amanking.com/common-code-smells</link>
      <pubDate>2013-04-21</pubDate>
      <description>&lt;p&gt;I have worked on multiple systems written in object-oriented languages. Time and again, I encounter common code smells. What is curious is that these smells are observable not only in legacy&lt;small&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/small&gt; systems but also in well-intentioned greenfield&lt;small&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/small&gt; projects.&lt;/p&gt;

&lt;p&gt;One could ascribe these to the developers not knowing any better, or possibly to a more common reason, &lt;a href="http://martinfowler.com/bliki/TechnicalDebt.html"&gt;Technical Debt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Either way, I have learnt that being conscious of these code smells is important while working with code bases. Simply learning about the code smells is not enough. You need to actively look out for them &lt;em&gt;all the time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The next step, after identifying the smell, is of course to deal with it. For now, I will only list the code smells. I am planning a separate series of &lt;em&gt;nugget&lt;/em&gt; posts to get into more details later. But don&amp;#39;t wait for those posts! Read &lt;a href="http://martinfowler.com/books/refactoring.html"&gt;the Refactoring book&lt;/a&gt; now for most of the common smells!&lt;/p&gt;

&lt;h2 id="toc_0"&gt;The smells!&lt;/h2&gt;

&lt;h3 id="toc_1"&gt;In both legacy and greenfield projects&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Multiple assignments to local variable&lt;/li&gt;
&lt;li&gt;Law of Demeter violation&lt;/li&gt;
&lt;li&gt;Data clumps&lt;/li&gt;
&lt;li&gt;Null checks&lt;/li&gt;
&lt;li&gt;Switch case&lt;/li&gt;
&lt;li&gt;Primitive obsession&lt;/li&gt;
&lt;li&gt;Long method&lt;/li&gt;
&lt;li&gt;Feature envy&lt;/li&gt;
&lt;li&gt;Using language features or core APIs like &lt;code&gt;Collections.emptyList()&lt;/code&gt; wrongly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;Usually in legacy systems&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Setters in domain objects&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt;
&lt;li&gt;Use of Singleton pattern&lt;/li&gt;
&lt;li&gt;Violations of layered architecture&lt;/li&gt;
&lt;li&gt;Long class&lt;/li&gt;
&lt;li&gt;Commented code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_3"&gt;Usually in greenfield systems&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Field injection&lt;/li&gt;
&lt;li&gt;Inappropriate mocking, such as misuse of &lt;code&gt;Mockito.any()&lt;/code&gt; with &lt;code&gt;Mockito.when()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unit tests not respecting architecture layers&lt;/li&gt;
&lt;li&gt;Complicated setup in unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will keep adding to these lists over time.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;small&gt;
[1] For the purposes of this post and others, I will use &amp;quot;legacy&amp;quot; to mean systems that have survived for nearly 10 years or more, running on old or raw technologies like Servlets, JDBC, etc, and without much automated test coverage. There may have been attempts to mix in new technologies and increase test coverage but the majority is still legacy.&lt;/p&gt;

&lt;p&gt;[2] I will use &amp;quot;greenfield&amp;quot; to mean systems that are written in recent times. They run on newer technologies, using frameworks for MVC, ORM, IoC, etc. I will assume that the developers are aware of clean code practices and do unit testing, perhaps even TDD along with refactoring.
&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
